<% content_for :title do %>Project Euler<% end %>
<h3>Project Euler</h3>
<p>I began working through the <a href="https://projecteuler.net/problems" title="Project Euler Site" target=""_blank">Project Euler</a>
  problems to get a better perspective on Ruby.  Here are a few of my solutions. (You may notice I skipped around a bit!)</p>
<div class="euler">
  <div class="panel-group" id="accordion">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne">1. Multiples of 3 and 5</a>
        </h4>
      </div>
      <div id="collapseOne" class="panel-collapse collapse in">
        <div class="panel-body">
          <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
            The sum of these multiples is 23.  Find the sum of all the multiples of 3 or 5 below 1000.</p>
            <blockquote><code>
              timer_start = Time.now<br />
              p (0..1000).select {|i| i%3 == 0 || i%5 == 0}.inject(0) {|s,i|<br />
              p "time =  #{(Time.now - timer_start)*1000}"<br />
              # answer = 233168<br />
              # time = 0.116 ms<br />
            </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">2. Even Fibonacci numbers</a>
        </h4>
      </div>
      <div id="collapseTwo" class="panel-collapse collapse">
        <div class="panel-body">
          <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms.
            By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            a    = [1,2]<br />
            top = 4000000<br />
            while a[-2] + a[-1] < top<br />
            a << a[-2] + a[-1]<br />
            end<br />
            puts a<br />
            tot  = 0<br />
            a.each { |x| tot += x if x.even? }<br />
            p "Total = #{tot}"<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # Total = 4613732<br />
            # time =  0.105<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseThree">3. Largest prime factors</a>
        </h4>
      </div>
      <div id="collapseThree" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The prime factors of 13195 are 5, 7, 13 and 29.  What is the largest prime factor of the number 600851475143 ?</p>
          <blockquote><code>
            require 'prime'<br />
            timer_start = Time.now<br />
            max = 600851475143<br />
            fp = 3<br />
            while (max >= fp) do<br />
            if (fp.prime? && (max % fp == 0))<br />
            largest_prime = fp<br />
            max = max / fp<br />
            else<br />
            fp = fp + 2<br />
            end<br />
            end<br />
            p "largest prime is #{largest_prime}"<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # largest prime is 6857<br />
            # time =  22.165<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFour">4. Largest palindrome product</a>
        </h4>
      </div>
      <div id="collapseFour" class="panel-collapse collapse">
        <div class="panel-body">
          <p>A palindromic number reads the same both ways.
            The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
            Find the largest palindrome made from the product of two 3-digit numbers.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            def is_palindrome?(n)<br />
            n == n.to_s.reverse.to_i<br />
            end<br />
            def v4<br />
            palindrome = [ ]<br />
            a = 111.upto(999)<br />
            a.each do |x|<br />
            a.each do |y|<br />
            multiply = x * y<br />
            if is_palindrome?(multiply)<br />
            palindrome << multiply<br />
            end<br />
            end<br />
            end<br />
            palindrome.max<br />
            end<br />
            p "The largest 3-digit palindrome is #{v4}"<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            #"The largest 3-digit palindrome is 906609"<br />
            # time =  317.548<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFive">5. Smallest multiple</a>
        </h4>
      </div>
      <div id="collapseFive" class="panel-collapse collapse">
        <div class="panel-body">
          <p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            class Numeric<br />
            def answer?(a)<br />
            self > 0 and a.downto(1).all? { |i| self % i == 0 }<br />
            end<br />
            end<br />
            def answer(a)<br />
            if a < 1<br />
            return false<br />
            elsif a == 1<br />
            return 1<br />
            else<br />
            n = 0<br />
            step = answer(a-1)<br />
            until n.answer? a<br />
            n += step<br />
            end<br />
            return n<br />
            end<br />
            end<br />
            p answer(10)<br />
            p answer(20)<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # 2520<br />
            # 232792560<br />
            # time =  0.131<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseSix">6. Sum square difference</a>
        </h4>
      </div>
      <div id="collapseSix" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The sum of the squares of the first ten natural numbers is, 12 + 22 + ... + 102 = 385.
            The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)2 = 552 = 3025.
            Hence the difference between the sum of the squares of the first ten natural numbers
            and the square of the sum is 3025 − 385 = 2640.  Find the difference between the sum of the
            squares of the first one hundred natural numbers and the square of the sum.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            a = (1..100).to_a #creates array<br />
            sum_of_array = a.inject {|sum, num|  sum + num }<br />
            sum_of_squares = a.inject {|sum, num| sum + num**2 }<br />
            square_of_sum = sum_of_array**2<br />
            diff = square_of_sum - sum_of_squares<br />
            p "array = #{a}"<br />
            p "sum_of_array = #{sum_of_array}"<br />
            p "sum_of_squares = #{sum_of_squares}"<br />
            p "square_of_sum = #{square_of_sum}"<br />
            p "difference between square of the sum and the sum of the squares is #{diff}"<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # sum_of_array = 5050<br />
            # sum_of_squares = 338350<br />
            # square_of_sum = 25502500<br />
            # difference between square of the sum and the sum of the squares is 25164150<br />
            # time =  0.081<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseSeven">7. 10 001st prime number</a>
        </h4>
      </div>
      <div id="collapseSeven" class="panel-collapse collapse">
        <div class="panel-body">
          <p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
            What is the 10 001st prime number?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            require 'prime'<br />
            array=Prime.take(10001)<br />
            p array[-1]<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer: 104743<br />
            # time =  75.619<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseNine">9. Special Pythagorean triplet</a>
        </h4>
      </div>
      <div id="collapseNine" class="panel-collapse collapse">
        <div class="panel-body">
          <p>A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2
            For example, 32 + 42 = 9 + 16 = 25 = 52.
            There exists exactly one Pythagorean triplet for which a + b + c = 1000.
            Find the product abc.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            for a in (1..425)<br />
            for b in (a..425)<br />
            for c in (b..425)<br />
            if (a**2 + b**2 == c**2) and (a+b+c == 1000)<br />
            p a<br />
            p b<br />
            p c<br />
            p a*b*c<br />
            end<br />
            end<br />
            end<br />
            end<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # a=200<br />
            # b=375<br />
            # c=425<br />
            # a+b+c=1000<br />
            # a*b*c=31875000<br />
            # time =  2498.755<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTen">10. Summation of primes</a>
        </h4>
      </div>
      <div id="collapseTen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.  Find the sum of all the primes below two million.</p>
          <blockquote><code>
            timer_start = Time.now><br />
            require 'prime'<br />
            a=Prime.take_while {|p| p < 2000000 }<br />
            sum_of_array = a.inject {|sum, num|  sum + num }<br />
            p sum_of_array<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # 142913828922<br />
            # time =  2809.054<br />
        </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwelve">12. Highly divisible triangular number</a>
        </h4>
      </div>
      <div id="collapseTwelve" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The sequence of triangle numbers is generated by adding the natural numbers.
            So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
            The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br />
            Let us list the factors of the first seven triangle numbers:<br />
            1: 1<br />
            3: 1,3<br />
            6: 1,2,3,6<br />
            10: 1,2,5,10<br />
            15: 1,3,5,15<br />
            21: 1,3,7,21<br />
            28: 1,2,4,7,14,28<br />
            We can see that 28 is the first triangle number to have over five divisors.
            What is the value of the first triangle number to have over five hundred divisors?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            def the_divisors(num)<br />
            a=[1]<br />
            2.upto(Math.sqrt(num).floor) do |i|<br />
            if num % i == 0<br />
            a << i<br />
            end<br />
            end<br />
            a.reverse.each do |i|<br />
            a << num / i<br />
            end<br />
            a.uniq<br />
            end<br />
            answer = 0<br />
            count = 0<br />
            while the_divisors(answer).count < 500<br />
            count += 1<br />
            answer += count<br />
            end<br />
            puts answer<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer = 76576500<br />
            # time =  3709.183<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseThirteen">13. Large sum</a>
        </h4>
      </div>
      <div id="collapseThirteen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers (see code).</p>
          <blockquote><code>
            timer_start = Time.now<br />

            big_int = \<br />
            "37107287533902102798797998220837590246510135740250<br />
            46376937677490009712648124896970078050417018260538<br />
            74324986199524741059474233309513058123726617309629<br />
            91942213363574161572522430563301811072406154908250<br />
            23067588207539346171171980310421047513778063246676<br />
            89261670696623633820136378418383684178734361726757<br />
            28112879812849979408065481931592621691275889832738<br />
            44274228917432520321923589422876796487670272189318<br />
            47451445736001306439091167216856844588711603153276<br />
            70386486105843025439939619828917593665686757934951<br />
            62176457141856560629502157223196586755079324193331<br />
            64906352462741904929101432445813822663347944758178<br />
            92575867718337217661963751590579239728245598838407<br />
            58203565325359399008402633568948830189458628227828<br />
            80181199384826282014278194139940567587151170094390<br />
            35398664372827112653829987240784473053190104293586<br />
            86515506006295864861532075273371959191420517255829<br />
            71693888707715466499115593487603532921714970056938<br />
            54370070576826684624621495650076471787294438377604<br />
            53282654108756828443191190634694037855217779295145<br />
            36123272525000296071075082563815656710885258350721<br />
            45876576172410976447339110607218265236877223636045<br />
            17423706905851860660448207621209813287860733969412<br />
            81142660418086830619328460811191061556940512689692<br />
            51934325451728388641918047049293215058642563049483<br />
            62467221648435076201727918039944693004732956340691<br />
            15732444386908125794514089057706229429197107928209<br />
            55037687525678773091862540744969844508330393682126<br />
            18336384825330154686196124348767681297534375946515<br />
            80386287592878490201521685554828717201219257766954<br />
            78182833757993103614740356856449095527097864797581<br />
            16726320100436897842553539920931837441497806860984<br />
            48403098129077791799088218795327364475675590848030<br />
            87086987551392711854517078544161852424320693150332<br />
            59959406895756536782107074926966537676326235447210<br />
            69793950679652694742597709739166693763042633987085<br />
            41052684708299085211399427365734116182760315001271<br />
            65378607361501080857009149939512557028198746004375<br />
            35829035317434717326932123578154982629742552737307<br />
            94953759765105305946966067683156574377167401875275<br />
            88902802571733229619176668713819931811048770190271<br />
            25267680276078003013678680992525463401061632866526<br />
            36270218540497705585629946580636237993140746255962<br />
            24074486908231174977792365466257246923322810917141<br />
            91430288197103288597806669760892938638285025333403<br />
            34413065578016127815921815005561868836468420090470<br />
            23053081172816430487623791969842487255036638784583<br />
            11487696932154902810424020138335124462181441773470<br />
            63783299490636259666498587618221225225512486764533<br />
            67720186971698544312419572409913959008952310058822<br />
            95548255300263520781532296796249481641953868218774<br />
            76085327132285723110424803456124867697064507995236<br />
            37774242535411291684276865538926205024910326572967<br />
            23701913275725675285653248258265463092207058596522<br />
            29798860272258331913126375147341994889534765745501<br />
            18495701454879288984856827726077713721403798879715<br />
            38298203783031473527721580348144513491373226651381<br />
            34829543829199918180278916522431027392251122869539<br />
            40957953066405232632538044100059654939159879593635<br />
            29746152185502371307642255121183693803580388584903<br />
            41698116222072977186158236678424689157993532961922<br />
            62467957194401269043877107275048102390895523597457<br />
            23189706772547915061505504953922979530901129967519<br />
            86188088225875314529584099251203829009407770775672<br />
            11306739708304724483816533873502340845647058077308<br />
            82959174767140363198008187129011875491310547126581<br />
            97623331044818386269515456334926366572897563400500<br />
            42846280183517070527831839425882145521227251250327<br />
            55121603546981200581762165212827652751691296897789<br />
            32238195734329339946437501907836945765883352399886<br />
            75506164965184775180738168837861091527357929701337<br />
            62177842752192623401942399639168044983993173312731<br />
            32924185707147349566916674687634660915035914677504<br />
            99518671430235219628894890102423325116913619626622<br />
            73267460800591547471830798392868535206946944540724<br />
            76841822524674417161514036427982273348055556214818<br />
            97142617910342598647204516893989422179826088076852<br />
            87783646182799346313767754307809363333018982642090<br />
            10848802521674670883215120185883543223812876952786<br />
            71329612474782464538636993009049310363619763878039<br />
            62184073572399794223406235393808339651327408011116<br />
            66627891981488087797941876876144230030984490851411<br />
            60661826293682836764744779239180335110989069790714<br />
            85786944089552990653640447425576083659976645795096<br />
            66024396409905389607120198219976047599490197230297<br />
            64913982680032973156037120041377903785566085089252<br />
            16730939319872750275468906903707539413042652315011<br />
            94809377245048795150954100921645863754710598436791<br />
            78639167021187492431995700641917969777599028300699<br />
            15368713711936614952811305876380278410754449733078<br />
            40789923115535562561142322423255033685442488917353<br />
            44889911501440648020369068063960672322193204149535<br />
            41503128880339536053299340368006977710650566631954<br />
            81234880673210146739058568557934581403627822703280<br />
            82616570773948327592232845941706525094512325230608<br />
            22918802058777319719839450180888072429661980811197<br />
            77158542502016545090413245809786882778948721859617<br />
            72107838435069186155435662884062257473692284509516<br />
            20849603980134001723930671666823555245252804609722<br />
            53503534226472524250874054075591789781264330331690"<br />
            # each line is 50 chars so split at end<br />
            sum = big_int.split("\n")\<br />
            .map(&:to_i).inject(&:+)<br />
            p sum.to_s.slice(0..9)<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer: 5537376230<br />
            # time =  0.16"<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFourteen">14. Longest Collatz sequence</a>
        </h4>
      </div>
      <div id="collapseFourteen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The following iterative sequence is defined for the set of positive integers:<br />
            n → n/2 (n is even)<br />
            n → 3n + 1 (n is odd)<br />
            Using the rule above and starting with 13, we generate the following sequence:<br />
            13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1<br />
            It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
            Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
            Which starting number, under one million, produces the longest chain?
            NOTE: Once the chain starts the terms are allowed to go above one million.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            def collatz(haystack, n, count)<br />
            if haystack.has_key? n<br />
            return haystack[n] + count<br />
            end #end if<br />
            if (n & 1) == 0<br />
            return collatz(haystack, n/2, count+1)<br />
            end #end if<br />
            collatz(haystack, 3*n + 1, count+1)<br />
            end #end def<br />
            pile = Hash[0,1,1,0]<br />
            starting_no, longest_chain = 1, 0<br />
            1_000_000.times do |i|<br />
            pile[i] = collatz(pile, i, 1)<br />
            if pile[i] > longest_chain<br />
            longest_chain = pile[i]<br />
            starting_no = i<br />
            end #end if<br />
            end #do loop<br />
            p starting_no<br />
            p longest_chain<br />
            p  "Run time =  #{(Time.now - timer_start)}"<br />
            # starting_no = 837799<br />
            # longest_chain = 557 or 525 ? hmmmm<br />
            # runs in 2.7 seconds<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFifteen">15. Lattice path</a>
        </h4>
      </div>
      <div id="collapseFifteen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,
            there are exactly 6 routes to the bottom right corner. <img src="https://projecteuler.net/project/images/p015.gif" alt="lattice" >How many such routes are there through a 20×20 grid?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            # there are no factorials in ruby<br />
            # however for factorial of 5 (5!)<br />
            # factorial_of_5 =(1...6).inject(:*) = 5*4*3*2*1<br />
            f20 = (1...21).inject(:*)<br />
            f40 = (1...41).inject(:*)<br />
            # (20+20)!/(20! * 20!) this is equation needed re pascals triangle<br />
            # or 40! / (20! * 20!)<br />
            #p f20<br />
            #p f40<br />
            p f40/(f20 *f20)<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer = 137846528820<br />
            # 0.0349 ms<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseSixteen">16. Power digit sum</a>
        </h4>
      </div>
      <div id="collapseSixteen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
            What is the sum of the digits of the number 2<sup>1000</sup>?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            answer=2**1000<br />
            a=answer.to_s.split(//).map(&:to_i)<br />
            sum_of_array=a.inject(0, &:+)<br />
            p answer<br />
            p a<br />
            p sum_of_array<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # 1366<br />
            # .277 ms<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseSeventeen">17. Number letter counts</a>
        </h4>
      </div>
      <div id="collapseSeventeen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>If the numbers 1 to 5 are written out in words:
            one, two, three, four, five, then there are
            3 + 3 + 5 + 4 + 4 = 19 letters used in total.
            If all the numbers from 1 to 1000 (one thousand) inclusive
            were written out in words, how many letters would be used?
            NOTE: Do not count spaces or hyphens.
            For example, 342 (three hundred and forty-two)
            contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.
            The use of "and" when writing out numbers is in compliance with British usage.</p>
          <blockquote><code>
            timer_start = Time.now<br />
            words_array= { "1" => "one", "2" => "two", "3" => "three", "4" => "four", "5" => "five",<br />
            "6" => "six", "7" => "seven", "8" => "eight", "9" => "nine", "10" => "ten",<br />
            "11" => "eleven", "12" => "twelve", "13" => "thirteen", "14" => "fourteen",<br />
            "15" => "fifteen", "16" => "sixteen", "17" => "seventeen", "18" => "eighteen",<br />
            "19" => "nineteen", "20" => "twenty", "30" => "thirty", "40" => "forty",<br />
            "50" => "fifty", "60" => "sixty", "70" => "seventy", "80" => "eighty",<br />
            "90" => "ninety", "100" => "onehundred", "1000" => "onethousand" }<br />
            total = 0<br />
            for i in (1..1000)<br />
            str = ""<br />
            if (words_array[i.to_s] != nil)<br />
            str = words_array[i.to_s]<br />
            elsif (i < 20)<br />
            str = words_array[i.to_s[1..1]] + "teen"<br />
            elsif (i < 100)<br />
            str = words_array[i.to_s[0..0] + "0"] + words_array[i.to_s[1..1]]<br />
            elsif (i < 1000)<br />
            str = words_array[i.to_s[0..0]] + "hundred"<br />
            if (i % 100 != 0)<br />
            str += "and"<br />
            if (words_array[i.to_s[1..2]] != nil)<br />
            str += words_array[i.to_s[1..2]]<br />
            elsif (i.to_s[1..1] == "0")<br />
            str += words_array[i.to_s[2..2]]<br />
            else<br />
            str += words_array[i.to_s[1..1] + "0"] + words_array[i.to_s[2..2]]<br />
            end<br />
            end<br />
            end<br />
            total += str.length<br />
            puts str + "\n"<br />
            end<br />
            puts total<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer = 21124<br />
            # time = 4.651<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseNineteen">19. Counting Sundays</a>
        </h4>
      </div>
      <div id="collapseNineteen" class="panel-collapse collapse">
        <div class="panel-body">
          <p>You are given the following information, but you may prefer to do some research for yourself.<br />
            1 Jan 1900 was a Monday.<br />
            Thirty days has September,<br />
            April, June and November.<br />
            All the rest have thirty-one,<br />
            Saving February alone,<br />
            Which has twenty-eight, rain or shine.<br />
            And on leap years, twenty-nine.<br />
            A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
            How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            require 'date'<br />
            start_date = Date.new(1901, 1, 1)<br />
            end_date = Date.new(2000, 12, 31)<br />
            count = 0<br />
            while start_date < end_date  do<br />
            count += 1 if start_date.wday == 0<br />
            start_date = start_date >> 1<br />
            end<br />
            puts count<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # 171<br />
            # 1.29 ms<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwenty">20. Factorial digit sum</a>
        </h4>
      </div>
      <div id="collapseTwenty" class="panel-collapse collapse">
        <div class="panel-body">
          <p>n! means n × (n − 1) × ... × 3 × 2 × 1<br />
            For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
            and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.<br />
            Find the sum of the digits in the number 100!</p>
          <blockquote><code>
            # there are no factorials in ruby<br />
            # however for factorial of 5 (5!)<br />
            # factorial_of_5 =(1...6).inject(:*) = 5*4*3*2*1<br />
            # 10! = 3628800,<br />
            # sum of the digits in 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.<br />
            timer_start = Time.now<br />
            # f10 = (1...11).inject(:*)<br />
            # p f10<br />
            f100 = (1...101).inject(:*)<br />
            sum_of_digits = f100.to_s.chars.map(&:to_i).reduce(:+)<br />
            # p f100<br />
            p sum_of_digits<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # 27 for f10<br />
            # 648 for f100<br />
            # 0.096 ms<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwentyfour">24. Lexicographic permutations</a>
        </h4>
      </div>
      <div id="collapseTwentyfour" class="panel-collapse collapse">
        <div class="panel-body">
          <p>A permutation is an ordered arrangement of objects.
            For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4.
            If all of the permutations are listed numerically or alphabetically,
            we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
             012   021   102   120   201   210<br />
            What is the millionth lexicographic permutation of the digits
             0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 ?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            #array = [0,1,2].permutation(3).to_a<br />
            #p array<br />
            array = [0,1,2,3,4,5,6,7,8,9].permutation(10).to_a<br />
            p array[999_999].join()<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer 2783915460<br />
            # 1643.90 <br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwentyfive">25. 1000-digit Fibonacci number</a>
        </h4>
      </div>
      <div id="collapseTwentyfive" class="panel-collapse collapse">
        <div class="panel-body">
          <p>The Fibonacci sequence is defined by the recurrence relation:<br />
          F<sub>n</sub> = F<sub>n&minus;1</sub> + F<sub>n&minus;2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.
          <p>Hence the first 12 terms will be:</p>
          F<sub>1</sub> = 1<br />
            F<sub>2</sub> = 1<br />
            F<sub>3</sub> = 2<br />
            F<sub>4</sub> = 3<br />
            F<sub>5</sub> = 5<br />
            F<sub>6</sub> = 8<br />
            F<sub>7</sub> = 13<br />
            F<sub>8</sub> = 21<br />
            F<sub>9</sub> = 34<br />
            F<sub>10</sub> = 55<br />
            F<sub>11</sub> = 89<br />
            F<sub>12</sub> = 144<br />
          The 12th term, F<sub>12</sub>, is the first term to contain three digits.<br />
          What is the first term in the Fibonacci sequence to contain 1000 digits?</p>
          <blockquote><code>
            timer_start = Time.now<br />
            # Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1<br />
            fn = [1, 1]<br />
            while fn.last.to_s.length < 1000<br />
            fn << fn[-1] + fn[-2]<br />
            end<br />
            p fn.count<br />
            p "time =  #{(Time.now - timer_start)*1000}"<br />
            # answer 4782<br />
            # 187.84 ms<br />
          </code>
          </blockquote>
        </div>
      </div>
    </div>

  </div>
</div>